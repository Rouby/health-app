// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x", "native"]
  output        = "../../../.yarn/unplugged/@prisma-client-virtual-d7481467dc/node_modules/.prisma/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  name String

  sexActs        SexAct[]
  daysWithoutSex DayWithoutSex[]

  partner         User?   @relation("Partner", fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partnerId       String? @unique
  partnerProposer User?   @relation("Partner") // This is the user that proposed the current user as a partner

  mood Mood?

  pushNotifications PushNotification[]
}

model Mood {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  validUntil DateTime?

  inMoodFor String?

  @@id([userId])
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

enum Initiator {
  USER
  PARTNER
}

model SexAct {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  dateTime          DateTime
  duration          String?
  location          String?
  initiator         Initiator
  foreplayOnUser    String?
  foreplayOnPartner String?
  position          String
  userFinished      Boolean
  partnerFinished   Boolean

  @@index([userId])
}

model DayWithoutSex {
  dateTime DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  onPeriod Boolean @default(false)

  @@id([dateTime, userId])
  @@index([userId])
}

model PushNotification {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  endpoint String @unique
  keys     Json

  @@id([endpoint, userId])
  @@index([userId])
}
